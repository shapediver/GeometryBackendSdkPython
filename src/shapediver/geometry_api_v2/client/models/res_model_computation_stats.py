# coding: utf-8

"""
    Geometry Backend API v2

    The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.

    The version of the OpenAPI document: 2.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from shapediver.geometry_api_v2.client.models.res_computation_components import ResComputationComponents
from typing import Optional, Set
from typing_extensions import Self

class ResModelComputationStats(BaseModel):
    """
    Stats of a computation request.
    """ # noqa: E501
    size_assets: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Total size in bytes of the uncompressed resulting assets.")
    size_assets_storage: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Total size in bytes of the (potentially compressed) assets uploaded to storage.")
    time_completion: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of milliseconds it took to answer the request.")
    time_model_download: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of milliseconds it took to download the model from storage. `0` in case model was already downloaded to the instance.")
    time_model_open: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of milliseconds it took to  load (open) the model. `0` in case model was already loaded.  Note: Does not include time for script compilation and first computation.")
    time_processing: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of milliseconds it took to process the request.")
    time_check_stored: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of milliseconds it took to carry out checks that are done before loading the model.")
    time_check_loaded: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of milliseconds it took to carry out check that are done after loading the model.")
    time_storage: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds it took to upload assets to storage.")
    time_solver: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of milliseconds for Grasshopper solver.")
    time_solver_collect: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds it took to collect output and export data after computation.")
    time_solver_ext: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of milliseconds it took to download and load the model and setting parameters, and to compute the solution.")
    time_wait: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of milliseconds the request was waiting before being processed.")
    time_cache_outputs: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds it took to store the results of the request in the cache.")
    model: Optional[ResComputationComponents] = Field(default=None, description="Information about model computations.")
    cpu_time_check_stored: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds the CPU was used to carry out checks which are done before loading the model.")
    cpu_time_check_loaded: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds the CPU was used to carry out checks which are done after loading the model.")
    cpu_time_storage: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds the CPU was used to upload assets to storage.")
    cpu_time_model_download: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds the CPU was used to download the model from storage.")
    cpu_time_model_open: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds the CPU was used to  load (open) the model. `0` in case model was already loaded.")
    cpu_time_solver: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds the CPU was used for Grasshopper solver.")
    cpu_time_solver_collect: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds the CPU was used to collect output and export data after computation.")
    cpu_time_solver_ext: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds the CPU was used to download and load the model and setting parameters, and to compute the solution.")
    cpu_time_cache_outputs: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds the CPU was used to store the results of the request in the cache.")
    time_model_prepare: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds it took to prepare the model after loading it. As an example, preparation includes compilation of scripts.")
    cpu_time_model_prepare: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of milliseconds the CPU was used to prepare the model after loading it. As an example, preparation includes compilation of scripts.")
    __properties: ClassVar[List[str]] = ["size_assets", "size_assets_storage", "time_completion", "time_model_download", "time_model_open", "time_processing", "time_check_stored", "time_check_loaded", "time_storage", "time_solver", "time_solver_collect", "time_solver_ext", "time_wait", "time_cache_outputs", "model", "cpu_time_check_stored", "cpu_time_check_loaded", "cpu_time_storage", "cpu_time_model_download", "cpu_time_model_open", "cpu_time_solver", "cpu_time_solver_collect", "cpu_time_solver_ext", "cpu_time_cache_outputs", "time_model_prepare", "cpu_time_model_prepare"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResModelComputationStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResModelComputationStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "size_assets": obj.get("size_assets"),
            "size_assets_storage": obj.get("size_assets_storage"),
            "time_completion": obj.get("time_completion"),
            "time_model_download": obj.get("time_model_download"),
            "time_model_open": obj.get("time_model_open"),
            "time_processing": obj.get("time_processing"),
            "time_check_stored": obj.get("time_check_stored"),
            "time_check_loaded": obj.get("time_check_loaded"),
            "time_storage": obj.get("time_storage"),
            "time_solver": obj.get("time_solver"),
            "time_solver_collect": obj.get("time_solver_collect"),
            "time_solver_ext": obj.get("time_solver_ext"),
            "time_wait": obj.get("time_wait"),
            "time_cache_outputs": obj.get("time_cache_outputs"),
            "model": ResComputationComponents.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "cpu_time_check_stored": obj.get("cpu_time_check_stored"),
            "cpu_time_check_loaded": obj.get("cpu_time_check_loaded"),
            "cpu_time_storage": obj.get("cpu_time_storage"),
            "cpu_time_model_download": obj.get("cpu_time_model_download"),
            "cpu_time_model_open": obj.get("cpu_time_model_open"),
            "cpu_time_solver": obj.get("cpu_time_solver"),
            "cpu_time_solver_collect": obj.get("cpu_time_solver_collect"),
            "cpu_time_solver_ext": obj.get("cpu_time_solver_ext"),
            "cpu_time_cache_outputs": obj.get("cpu_time_cache_outputs"),
            "time_model_prepare": obj.get("time_model_prepare"),
            "cpu_time_model_prepare": obj.get("cpu_time_model_prepare")
        })
        return _obj


