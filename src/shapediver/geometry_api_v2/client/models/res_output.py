# coding: utf-8

"""
    Geometry Backend API v2

    The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.

    The version of the OpenAPI document: 2.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from shapediver.geometry_api_v2.client.models.res_computation_status import ResComputationStatus
from shapediver.geometry_api_v2.client.models.res_output_chunk import ResOutputChunk
from shapediver.geometry_api_v2.client.models.res_output_content import ResOutputContent
from shapediver.geometry_api_v2.client.models.res_output_definition_group import ResOutputDefinitionGroup
from typing import Optional, Set
from typing_extensions import Self

class ResOutput(BaseModel):
    """
    Output definition WITH results as exposed on the API.
    """ # noqa: E501
    id: StrictStr = Field(description="ID of the output, dependent on model ID, and therefore changing each time a model gets uploaded.")
    uid: Optional[StrictStr] = Field(default=None, description="Constant ID of the output, not dependent on model ID, and therefore NOT changing each time a model gets uploaded. Might be undefined because this property was introduced in summer 2020 and does not exist for outputs of older models.")
    name: StrictStr = Field(description="Name of the output.")
    material: Optional[StrictStr] = Field(default=None, description="Optional ID of the output holding material information for this output.")
    chunks: Optional[List[ResOutputChunk]] = Field(default=None, description="Information about which chunks exist in the asset/sdTF.")
    dependency: List[StrictStr] = Field(description="List of IDs of parameters influencing this output.")
    group: Optional[ResOutputDefinitionGroup] = None
    order: Optional[StrictInt] = Field(default=None, description="Ordering of the output in client applications.")
    tooltip: Optional[StrictStr] = Field(default=None, description="Description that is shown as a tooltip in the clients.")
    displayname: Optional[StrictStr] = Field(default=None, description="Parameter name to display instead of `name`.")
    hidden: StrictBool = Field(description="Controls whether the parameter should be hidden in the UI.")
    version: StrictStr = Field(description="A unique identifier for the particular version of the output. This is a hash code which is based on the parameter values that were used to compute the resulting data. The hash code only depends on the values of the parameters which may theoretically influence the results of the output. As an example, parameters which are in no way connected to the output component in Grasshopper are not considered.")
    delay: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The delay in milliseconds after which a cache request shall be sent to check again for this output version. This property is used ONLY if the output version has not been computed yet.  Note that the existence of this property does not necessarily imply the presence of an active or queued computation for the respective output version.")
    content: Optional[List[ResOutputContent]] = Field(default=None, description="Result parts. In case this array does not exist, this means that the workers have not finished computation for this output version.")
    bbmin: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Optional bounding box, minimum corner.")
    bbmax: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Optional bounding box, maximum corner.")
    msg: Optional[StrictStr] = Field(default=None, description="In case computation of the export version (temporarily) failed. Contains a message explaining what went wrong.")
    status_computation: Optional[ResComputationStatus] = Field(default=None, description="Status of the computation which resulted in the output version.")
    status_collect: Optional[ResComputationStatus] = Field(default=None, description="Status of collecting results for the output version.")
    __properties: ClassVar[List[str]] = ["id", "uid", "name", "material", "chunks", "dependency", "group", "order", "tooltip", "displayname", "hidden", "version", "delay", "content", "bbmin", "bbmax", "msg", "status_computation", "status_collect"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in chunks (list)
        _items = []
        if self.chunks:
            for _item in self.chunks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chunks'] = _items
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in content (list)
        _items = []
        if self.content:
            for _item in self.content:
                if _item:
                    _items.append(_item.to_dict())
            _dict['content'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "uid": obj.get("uid"),
            "name": obj.get("name"),
            "material": obj.get("material"),
            "chunks": [ResOutputChunk.from_dict(_item) for _item in obj["chunks"]] if obj.get("chunks") is not None else None,
            "dependency": obj.get("dependency"),
            "group": ResOutputDefinitionGroup.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "order": obj.get("order"),
            "tooltip": obj.get("tooltip"),
            "displayname": obj.get("displayname"),
            "hidden": obj.get("hidden"),
            "version": obj.get("version"),
            "delay": obj.get("delay"),
            "content": [ResOutputContent.from_dict(_item) for _item in obj["content"]] if obj.get("content") is not None else None,
            "bbmin": obj.get("bbmin"),
            "bbmax": obj.get("bbmax"),
            "msg": obj.get("msg"),
            "status_computation": obj.get("status_computation"),
            "status_collect": obj.get("status_collect")
        })
        return _obj


