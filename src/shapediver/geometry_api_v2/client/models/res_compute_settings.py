# coding: utf-8

"""
    Geometry Backend API v2

    The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.

    The version of the OpenAPI document: 2.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ResComputeSettings(BaseModel):
    """
    ResComputeSettings
    """ # noqa: E501
    deny_scripts: StrictBool = Field(description="Allows to control whether the model's Grasshopper file can contain scripts.")
    ftype: StrictStr = Field(description="File type of the model.")
    initial_warmup: StrictBool = Field(description="Allows to control whether the model should be warmed up immediately after loading by running a computation. This increases the likelihood of following computation requests to be faster.")
    max_comp_time: Annotated[int, Field(strict=True, ge=0)] = Field(description="Maximum number of milliseconds allowed for computations of this model.")
    max_export_size: Annotated[int, Field(strict=True, ge=0)] = Field(description="Maximum number of bytes allowed to be exported from a model for a specific set of parameter values.")
    max_idle_minutes: Annotated[int, Field(strict=True, ge=0)] = Field(description="Maximum amount of minutes a loaded model may be unused before it gets unloaded.  Note: Models may get unloaded earlier than that.")
    max_model_size: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Maximum number of bytes allowed for the model's Grasshopper file size.")
    max_output_size: Annotated[int, Field(strict=True, ge=0)] = Field(description="Maximum number of bytes allowed for an output of a model for a specific set of parameter values.")
    max_texture_size: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Maximum number of bytes allowed for a single texture.")
    max_wait_time: Annotated[int, Field(strict=True, ge=0)] = Field(description="Maximum time a computation request may stay waiting before a further worker goes ahead regardless of whether it already has the model loaded, and regardless of `num_loaded_max`. This allows to configure a soft or a hard upper boundary for the number of loaded models.")
    num_loaded_max: Annotated[int, Field(strict=True, ge=0)] = Field(description="Maximum number of workers that should have the model loaded at the same time.")
    num_loaded_min: Annotated[int, Field(strict=True, ge=0)] = Field(description="Minimum number of workers that should load the model and keep it open while there is session activity.")
    num_preloaded_min: Annotated[int, Field(strict=True, ge=0)] = Field(description="Minimum number of workers that should always have the model loaded, regardless of session activity. This allows to minimise the likelihood of computation requests being slower due to model loading.")
    session_rate_limit: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Limits the number of sessions that can be created by a specific IP address in one hour.")
    trust: Annotated[str, Field(strict=True)] = Field(description="Controls whether failed computations will be retried.")
    __properties: ClassVar[List[str]] = ["deny_scripts", "ftype", "initial_warmup", "max_comp_time", "max_export_size", "max_idle_minutes", "max_model_size", "max_output_size", "max_texture_size", "max_wait_time", "num_loaded_max", "num_loaded_min", "num_preloaded_min", "session_rate_limit", "trust"]

    @field_validator('trust')
    def trust_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(none|full)?$", value):
            raise ValueError(r"must validate the regular expression /^(none|full)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResComputeSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResComputeSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deny_scripts": obj.get("deny_scripts"),
            "ftype": obj.get("ftype"),
            "initial_warmup": obj.get("initial_warmup"),
            "max_comp_time": obj.get("max_comp_time"),
            "max_export_size": obj.get("max_export_size"),
            "max_idle_minutes": obj.get("max_idle_minutes"),
            "max_model_size": obj.get("max_model_size"),
            "max_output_size": obj.get("max_output_size"),
            "max_texture_size": obj.get("max_texture_size"),
            "max_wait_time": obj.get("max_wait_time"),
            "num_loaded_max": obj.get("num_loaded_max"),
            "num_loaded_min": obj.get("num_loaded_min"),
            "num_preloaded_min": obj.get("num_preloaded_min"),
            "session_rate_limit": obj.get("session_rate_limit"),
            "trust": obj.get("trust")
        })
        return _obj


