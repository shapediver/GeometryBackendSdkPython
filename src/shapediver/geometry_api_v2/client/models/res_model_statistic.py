# coding: utf-8

"""
    Geometry Backend API v2

    The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.

    The version of the OpenAPI document: 2.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from shapediver.geometry_api_v2.client.models.res_on_action_statistic import ResOnActionStatistic
from shapediver.geometry_api_v2.client.models.res_on_duration_statistic import ResOnDurationStatistic
from typing import Optional, Set
from typing_extensions import Self

class ResModelStatistic(BaseModel):
    """
    Aggregated model session statistics.
    """ # noqa: E501
    modelid: StrictStr = Field(description="Requested model ID.")
    timestamp: StrictStr = Field(description="Either an extended date-time or a 'merged'-specifier.")
    is_compilation_done: StrictBool = Field(description="Aggregation for this timestamp has finished.", alias="isCompilationDone")
    count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Number of (technical) sessions for the given model and timestamp. A technical session may last up to two hours, after which it will get cancelled by the backend.  CAUTION: Not to be confused with credits!")
    billable_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Billable duration-based credit count, based on maximum duration of 10 minutes per credit.", alias="billableCount")
    duration: ResOnDurationStatistic = Field(description="Statistics on the duration of all sessions.")
    app: ResOnDurationStatistic = Field(description="Statistics on the duration of app sessions.")
    backend: ResOnDurationStatistic = Field(description="Statistics on the duration of backend sessions.")
    embedded: ResOnDurationStatistic = Field(description="Statistics on the duration of embedded sessions.")
    desktop: ResOnDurationStatistic = Field(description="Statistics on the duration of desktop sessions.")
    customize: ResOnActionStatistic = Field(description="Statistics on customization requests per session.")
    export: ResOnActionStatistic = Field(description="Statistics on export requests per session.")
    __properties: ClassVar[List[str]] = ["modelid", "timestamp", "isCompilationDone", "count", "billableCount", "duration", "app", "backend", "embedded", "desktop", "customize", "export"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResModelStatistic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of duration
        if self.duration:
            _dict['duration'] = self.duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict['app'] = self.app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backend
        if self.backend:
            _dict['backend'] = self.backend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of embedded
        if self.embedded:
            _dict['embedded'] = self.embedded.to_dict()
        # override the default output from pydantic by calling `to_dict()` of desktop
        if self.desktop:
            _dict['desktop'] = self.desktop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customize
        if self.customize:
            _dict['customize'] = self.customize.to_dict()
        # override the default output from pydantic by calling `to_dict()` of export
        if self.export:
            _dict['export'] = self.export.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResModelStatistic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "modelid": obj.get("modelid"),
            "timestamp": obj.get("timestamp"),
            "isCompilationDone": obj.get("isCompilationDone"),
            "count": obj.get("count"),
            "billableCount": obj.get("billableCount"),
            "duration": ResOnDurationStatistic.from_dict(obj["duration"]) if obj.get("duration") is not None else None,
            "app": ResOnDurationStatistic.from_dict(obj["app"]) if obj.get("app") is not None else None,
            "backend": ResOnDurationStatistic.from_dict(obj["backend"]) if obj.get("backend") is not None else None,
            "embedded": ResOnDurationStatistic.from_dict(obj["embedded"]) if obj.get("embedded") is not None else None,
            "desktop": ResOnDurationStatistic.from_dict(obj["desktop"]) if obj.get("desktop") is not None else None,
            "customize": ResOnActionStatistic.from_dict(obj["customize"]) if obj.get("customize") is not None else None,
            "export": ResOnActionStatistic.from_dict(obj["export"]) if obj.get("export") is not None else None
        })
        return _obj


