# coding: utf-8

"""
    Geometry Backend API v2

    The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from shapediver.geometry_api_v2.client.models.res_action import ResAction
from shapediver.geometry_api_v2.client.models.res_analytics import ResAnalytics
from shapediver.geometry_api_v2.client.models.res_asset import ResAsset
from shapediver.geometry_api_v2.client.models.res_export_or_definition import ResExportOrDefinition
from shapediver.geometry_api_v2.client.models.res_file import ResFile
from shapediver.geometry_api_v2.client.models.res_gltf_upload import ResGltfUpload
from shapediver.geometry_api_v2.client.models.res_list import ResList
from shapediver.geometry_api_v2.client.models.res_model import ResModel
from shapediver.geometry_api_v2.client.models.res_model_cleanup_process import ResModelCleanupProcess
from shapediver.geometry_api_v2.client.models.res_model_computation import ResModelComputation
from shapediver.geometry_api_v2.client.models.res_model_state_or_data import ResModelStateOrData
from shapediver.geometry_api_v2.client.models.res_output_or_definition import ResOutputOrDefinition
from shapediver.geometry_api_v2.client.models.res_pagination import ResPagination
from shapediver.geometry_api_v2.client.models.res_parameter import ResParameter
from shapediver.geometry_api_v2.client.models.res_plugins import ResPlugins
from shapediver.geometry_api_v2.client.models.res_settings import ResSettings
from shapediver.geometry_api_v2.client.models.res_statistic import ResStatistic
from shapediver.geometry_api_v2.client.models.res_system import ResSystem
from shapediver.geometry_api_v2.client.models.res_template import ResTemplate
from shapediver.geometry_api_v2.client.models.res_ticket import ResTicket
from shapediver.geometry_api_v2.client.models.res_viewer import ResViewer
from typing import Optional, Set
from typing_extensions import Self

class ResBase(BaseModel):
    """
    ResBase
    """ # noqa: E501
    asset: Optional[ResAsset] = None
    list: Optional[ResList] = None
    model_state: Optional[ResModelStateOrData] = Field(default=None, alias="modelState")
    system: Optional[ResSystem] = None
    actions: Optional[List[ResAction]] = Field(default=None, description="Actions the client may take.")
    analytics: Optional[ResAnalytics] = Field(default=None, description="Statistics of the model for the given timespan.")
    auth_group: Optional[StrictStr] = Field(default=None, description="The auth-group to use for ticked-based authentication.")
    cleanup: Optional[List[ResModelCleanupProcess]] = Field(default=None, description="Model cleanup information.")
    decrypted_ticket: Optional[ResTicket] = Field(default=None, description="Decrypted ticket details.", alias="decryptedTicket")
    exports: Optional[Dict[str, ResExportOrDefinition]] = Field(default=None, description="Exports of the model for the given parameter values. A directory of export-IDs and exports.")
    file: Optional[ResFile] = Field(default=None, description="Links regarding the model file.")
    gltf: Optional[ResGltfUpload] = Field(default=None, description="glTF information.")
    message: Optional[StrictStr] = Field(default=None, description="Contains urgent information about the system.")
    model: Optional[ResModel] = Field(default=None, description="The definitions of a ShapeDiver model.")
    computations: Optional[List[ResModelComputation]] = Field(default=None, description="Statistics about model computations.")
    outputs: Optional[Dict[str, ResOutputOrDefinition]] = Field(default=None, description="Outputs of the model for the given parameter values. A directory of output-IDs and outputs.")
    pagination: Optional[ResPagination] = Field(default=None, description="Pagination information.")
    parameters: Optional[Dict[str, ResParameter]] = Field(default=None, description="Parameter definitions, not contained with every response. A directory of parameter-IDs and parameters.")
    plugins: Optional[ResPlugins] = None
    session_id: Optional[StrictStr] = Field(default=None, description="The ID of the created session.", alias="sessionId")
    setting: Optional[ResSettings] = Field(default=None, description="Various settings.")
    statistic: Optional[ResStatistic] = Field(default=None, description="Statistics of a model.")
    templates: Optional[List[ResTemplate]] = Field(default=None, description="Request templates for actions.")
    ticket: Optional[StrictStr] = Field(default=None, description="The ticket to create a model session.")
    version: StrictStr = Field(description="Version of the Geometry Backend API.")
    viewer: Optional[ResViewer] = Field(default=None, description="Viewer specific data.")
    viewer_settings_version: Optional[StrictStr] = Field(default=None, description="The current version of the viewer settings.", alias="viewerSettingsVersion")
    warnings: Optional[List[StrictStr]] = Field(default=None, description="An array of warnings encountered during request processing. These warnings indicate potential issues or non-critical conditions but did not prevent the request from being successfully processed.")
    __properties: ClassVar[List[str]] = ["asset", "list", "modelState", "system", "actions", "analytics", "auth_group", "cleanup", "decryptedTicket", "exports", "file", "gltf", "message", "model", "computations", "outputs", "pagination", "parameters", "plugins", "sessionId", "setting", "statistic", "templates", "ticket", "version", "viewer", "viewerSettingsVersion", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of asset
        if self.asset:
            _dict['asset'] = self.asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of list
        if self.list:
            _dict['list'] = self.list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_state
        if self.model_state:
            _dict['modelState'] = self.model_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system
        if self.system:
            _dict['system'] = self.system.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item in self.actions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of analytics
        if self.analytics:
            _dict['analytics'] = self.analytics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in cleanup (list)
        _items = []
        if self.cleanup:
            for _item in self.cleanup:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cleanup'] = _items
        # override the default output from pydantic by calling `to_dict()` of decrypted_ticket
        if self.decrypted_ticket:
            _dict['decryptedTicket'] = self.decrypted_ticket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in exports (dict)
        _field_dict = {}
        if self.exports:
            for _key in self.exports:
                if self.exports[_key]:
                    _field_dict[_key] = self.exports[_key].to_dict()
            _dict['exports'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gltf
        if self.gltf:
            _dict['gltf'] = self.gltf.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in computations (list)
        _items = []
        if self.computations:
            for _item in self.computations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['computations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in outputs (dict)
        _field_dict = {}
        if self.outputs:
            for _key in self.outputs:
                if self.outputs[_key]:
                    _field_dict[_key] = self.outputs[_key].to_dict()
            _dict['outputs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of pagination
        if self.pagination:
            _dict['pagination'] = self.pagination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key in self.parameters:
                if self.parameters[_key]:
                    _field_dict[_key] = self.parameters[_key].to_dict()
            _dict['parameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of plugins
        if self.plugins:
            _dict['plugins'] = self.plugins.to_dict()
        # override the default output from pydantic by calling `to_dict()` of setting
        if self.setting:
            _dict['setting'] = self.setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistic
        if self.statistic:
            _dict['statistic'] = self.statistic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in templates (list)
        _items = []
        if self.templates:
            for _item in self.templates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['templates'] = _items
        # override the default output from pydantic by calling `to_dict()` of viewer
        if self.viewer:
            _dict['viewer'] = self.viewer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset": ResAsset.from_dict(obj["asset"]) if obj.get("asset") is not None else None,
            "list": ResList.from_dict(obj["list"]) if obj.get("list") is not None else None,
            "modelState": ResModelStateOrData.from_dict(obj["modelState"]) if obj.get("modelState") is not None else None,
            "system": ResSystem.from_dict(obj["system"]) if obj.get("system") is not None else None,
            "actions": [ResAction.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "analytics": ResAnalytics.from_dict(obj["analytics"]) if obj.get("analytics") is not None else None,
            "auth_group": obj.get("auth_group"),
            "cleanup": [ResModelCleanupProcess.from_dict(_item) for _item in obj["cleanup"]] if obj.get("cleanup") is not None else None,
            "decryptedTicket": ResTicket.from_dict(obj["decryptedTicket"]) if obj.get("decryptedTicket") is not None else None,
            "exports": dict(
                (_k, ResExportOrDefinition.from_dict(_v))
                for _k, _v in obj["exports"].items()
            )
            if obj.get("exports") is not None
            else None,
            "file": ResFile.from_dict(obj["file"]) if obj.get("file") is not None else None,
            "gltf": ResGltfUpload.from_dict(obj["gltf"]) if obj.get("gltf") is not None else None,
            "message": obj.get("message"),
            "model": ResModel.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "computations": [ResModelComputation.from_dict(_item) for _item in obj["computations"]] if obj.get("computations") is not None else None,
            "outputs": dict(
                (_k, ResOutputOrDefinition.from_dict(_v))
                for _k, _v in obj["outputs"].items()
            )
            if obj.get("outputs") is not None
            else None,
            "pagination": ResPagination.from_dict(obj["pagination"]) if obj.get("pagination") is not None else None,
            "parameters": dict(
                (_k, ResParameter.from_dict(_v))
                for _k, _v in obj["parameters"].items()
            )
            if obj.get("parameters") is not None
            else None,
            "plugins": ResPlugins.from_dict(obj["plugins"]) if obj.get("plugins") is not None else None,
            "sessionId": obj.get("sessionId"),
            "setting": ResSettings.from_dict(obj["setting"]) if obj.get("setting") is not None else None,
            "statistic": ResStatistic.from_dict(obj["statistic"]) if obj.get("statistic") is not None else None,
            "templates": [ResTemplate.from_dict(_item) for _item in obj["templates"]] if obj.get("templates") is not None else None,
            "ticket": obj.get("ticket"),
            "version": obj.get("version"),
            "viewer": ResViewer.from_dict(obj["viewer"]) if obj.get("viewer") is not None else None,
            "viewerSettingsVersion": obj.get("viewerSettingsVersion"),
            "warnings": obj.get("warnings")
        })
        return _obj


