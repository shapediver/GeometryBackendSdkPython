# coding: utf-8

"""
    Geometry Backend API v2

    The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.

    The version of the OpenAPI document: 2.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from shapediver.geometry_api_v2.client.models.res_model_status import ResModelStatus
from typing import Optional, Set
from typing_extensions import Self

class ResModel(BaseModel):
    """
    Definition of a ShapeDiver model.
    """ # noqa: E501
    backlinkurl: Optional[StrictStr] = Field(default=None, description="Link to view the model on the ShapeDiver Platform.")
    checkurl: Optional[StrictStr] = Field(default=None, description="Link to continue the checking process of the model on the ShapeDiver Platform.")
    createdate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Timestamp of creation of the model.")
    documentid: Optional[StrictStr] = Field(default=None, description="ID of the Grasshopper document.")
    filename: Optional[StrictStr] = Field(default=None, description="Original name of the model's grasshopper file.")
    id: StrictStr = Field(description="ID of the model.")
    id2: Optional[StrictStr] = Field(default=None, description="Optional second ID of the model. This value can be unset via an empty string.")
    msg: Optional[StrictStr] = Field(default=None, description="Optional message, used in case the model was denied.")
    name: Optional[StrictStr] = Field(default=None, description="Model name.")
    org_id: Optional[StrictStr] = Field(default=None, description="Organization ID of the user that owns the model.")
    stat: ResModelStatus
    user_id: Optional[StrictStr] = Field(default=None, description="ShapeDiver User ID of the model owner.")
    webhook_url: Optional[StrictStr] = Field(default=None, description="The webhook-url for updating the platform backend about model status changes.")
    webhook_token: Optional[StrictStr] = Field(default=None, description="The webhook-token for authentication used by the webhook-url.")
    __properties: ClassVar[List[str]] = ["backlinkurl", "checkurl", "createdate", "documentid", "filename", "id", "id2", "msg", "name", "org_id", "stat", "user_id", "webhook_url", "webhook_token"]

    @field_validator('createdate')
    def createdate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backlinkurl": obj.get("backlinkurl"),
            "checkurl": obj.get("checkurl"),
            "createdate": obj.get("createdate"),
            "documentid": obj.get("documentid"),
            "filename": obj.get("filename"),
            "id": obj.get("id"),
            "id2": obj.get("id2"),
            "msg": obj.get("msg"),
            "name": obj.get("name"),
            "org_id": obj.get("org_id"),
            "stat": obj.get("stat"),
            "user_id": obj.get("user_id"),
            "webhook_url": obj.get("webhook_url"),
            "webhook_token": obj.get("webhook_token")
        })
        return _obj


