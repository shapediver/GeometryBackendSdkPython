# coding: utf-8

"""
    Geometry Backend API v2

    The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.

    The version of the OpenAPI document: 2.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from shapediver.geometry_api_v2.client.models.res_worker_plugin_component import ResWorkerPluginComponent
from typing import Optional, Set
from typing_extensions import Self

class ResAllowedWorkerPlugin(BaseModel):
    """
    Contains the model checking configuration for the Grasshopper plugins.
    """ # noqa: E501
    id: StrictStr = Field(description="ID of the Grasshopper plugin.")
    name: StrictStr = Field(description="Name of the Grasshopper plugin.")
    min_version: StrictStr = Field(description="Minimum supported version of the plugin.", alias="minVersion")
    max_version: StrictStr = Field(description="Maximum supported version of the plugin.", alias="maxVersion")
    author_name: Optional[StrictStr] = Field(default=None, description="Name of the plugin author.", alias="authorName")
    description: Optional[StrictStr] = Field(default=None, description="Link to a website related to the plugin.")
    allow_fallback_to_assembly_version: StrictBool = Field(description="When `true` then `GH_AssemblyInfo.AssemblyVersion` may be used instead of `GH_AssemblyInfo.Version` for version checking.  Defaults to `false`.", alias="allowFallbackToAssemblyVersion")
    check_major_minor_version_only: StrictBool = Field(description="When `true` then only the major and minor version numbers recorded in Grasshopper models will be checked.  Defaults to `false`.", alias="checkMajorMinorVersionOnly")
    check_if_installed: StrictBool = Field(description="When `false` then the installation check of the plugin will be skipped.  Defaults to `true`.", alias="checkIfInstalled")
    previous_ids: StrictStr = Field(description="List of previous plugin IDs supported by this plugin version. This is used for the obscure case of the plugin developer changing the plugin ID.", alias="previousIds")
    allowed_components: List[ResWorkerPluginComponent] = Field(description="List of plugin components that are explicitly allowed. When this property is set, only the listed components are allowed, overruling the list in `disallowedComponents`.", alias="allowedComponents")
    disallowed_components: List[ResWorkerPluginComponent] = Field(description="List of plugin components which may not be used. This list might be overruled by `allowedComponents`.", alias="disallowedComponents")
    __properties: ClassVar[List[str]] = ["id", "name", "minVersion", "maxVersion", "authorName", "description", "allowFallbackToAssemblyVersion", "checkMajorMinorVersionOnly", "checkIfInstalled", "previousIds", "allowedComponents", "disallowedComponents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResAllowedWorkerPlugin from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_components (list)
        _items = []
        if self.allowed_components:
            for _item in self.allowed_components:
                if _item:
                    _items.append(_item.to_dict())
            _dict['allowedComponents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in disallowed_components (list)
        _items = []
        if self.disallowed_components:
            for _item in self.disallowed_components:
                if _item:
                    _items.append(_item.to_dict())
            _dict['disallowedComponents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResAllowedWorkerPlugin from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "minVersion": obj.get("minVersion"),
            "maxVersion": obj.get("maxVersion"),
            "authorName": obj.get("authorName"),
            "description": obj.get("description"),
            "allowFallbackToAssemblyVersion": obj.get("allowFallbackToAssemblyVersion"),
            "checkMajorMinorVersionOnly": obj.get("checkMajorMinorVersionOnly"),
            "checkIfInstalled": obj.get("checkIfInstalled"),
            "previousIds": obj.get("previousIds"),
            "allowedComponents": [ResWorkerPluginComponent.from_dict(_item) for _item in obj["allowedComponents"]] if obj.get("allowedComponents") is not None else None,
            "disallowedComponents": [ResWorkerPluginComponent.from_dict(_item) for _item in obj["disallowedComponents"]] if obj.get("disallowedComponents") is not None else None
        })
        return _obj


