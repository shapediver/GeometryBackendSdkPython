# coding: utf-8

"""
    Geometry Backend API v2

    The ShapeDiver Geometry Backend system is used to: * host Grasshopper models in a secure, reliable, scalable, and performant way, * run computations of Grasshopper models, * and cache and output the results of computations and exports.

    The version of the OpenAPI document: 2.13.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ResInstalledWorkerPlugin(BaseModel):
    """
    Contains information about all installed Grasshopper plugins.
    """ # noqa: E501
    id: StrictStr = Field(description="ID of the Grasshopper plugin.")
    name: StrictStr = Field(description="Name of the Grasshopper plugin.")
    version: StrictStr = Field(description="Version of the Grasshopper plugin.")
    author_name: StrictStr = Field(description="Name of the plugin author.", alias="authorName")
    author_contact: StrictStr = Field(description="Contact information of the plugin author (homepage URL, email address, etc.).", alias="authorContact")
    description: StrictStr = Field(description="General description of the Grasshopper plugin.")
    assembly_version: StrictStr = Field(description="Assembly version of the Grasshopper plugin DLL.  See the [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.assemblyname.version?view=net-8.0) for more information.", alias="assemblyVersion")
    assembly_full_name: StrictStr = Field(description="Full assembly name of the Grasshopper plugin DLL.  See the [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.assembly.fullname?view=net-8.0) for more information.", alias="assemblyFullName")
    is_core_library: StrictStr = Field(description="Gets whether this library is a Grasshopper core library. Core libraries are installed along with Grasshopper and thus should always be available anywhere.", alias="isCoreLibrary")
    license: StrictStr = Field(description="The license type of the plugin.  See the [documentation](https://developer.rhino3d.com/api/grasshopper/html/T_Grasshopper_Kernel_GH_LibraryLicense.htm) for more information.")
    loading_mechanism: StrictStr = Field(description="The mechanism used to load the plugin.  See the [documentation](https://developer.rhino3d.com/api/grasshopper/html/T_Grasshopper_Kernel_GH_LoadingMechanism.htm) for more information.", alias="loadingMechanism")
    location: StrictStr = Field(description="Installation path of the Grasshopper plugin.")
    __properties: ClassVar[List[str]] = ["id", "name", "version", "authorName", "authorContact", "description", "assemblyVersion", "assemblyFullName", "isCoreLibrary", "license", "loadingMechanism", "location"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResInstalledWorkerPlugin from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResInstalledWorkerPlugin from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "version": obj.get("version"),
            "authorName": obj.get("authorName"),
            "authorContact": obj.get("authorContact"),
            "description": obj.get("description"),
            "assemblyVersion": obj.get("assemblyVersion"),
            "assemblyFullName": obj.get("assemblyFullName"),
            "isCoreLibrary": obj.get("isCoreLibrary"),
            "license": obj.get("license"),
            "loadingMechanism": obj.get("loadingMechanism"),
            "location": obj.get("location")
        })
        return _obj


